@page "/orderhistory"
@using HandyApp.Orders
@using Volo.Abp.Application.Dtos
@inject IOrderAppService OrderAppService
@inject NavigationManager NavigationManager

<Card>
    <CardHeader>
        <h2>Past Requested Services</h2>
        <span class="text-muted">Total: @totalCount</span>
    </CardHeader>

    <CardBody>
        <!-- DataGrid for Orders -->
        <DataGrid TItem="OrderDto"
                  Data="@orders"
                  TotalItems="@totalCount"
                  ShowPager="true"
                  PageSize="10">
            <DataGridColumns>
                <DataGridColumn TItem="OrderDto" Field="@nameof(OrderDto.ServiceName)" Caption="Service Name"></DataGridColumn>
                <DataGridColumn TItem="OrderDto" Field="@nameof(OrderDto.OrderDate)" Caption="Order Date">
                    <DisplayTemplate>
                        <span class="text-primary">@context.OrderDate.ToLongDateString()</span>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="OrderDto" Field="@nameof(OrderDto.Status)" Caption="Status">
                    <DisplayTemplate>
                        <span class="badge @GetStatusBadgeClass(context.Status)">
                            @context.Status
                        </span>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>

        <!-- Return Button -->
        <div class="flex justify-center mt-6">
            <Button Class="btn btn-primary" OnClick="GoBack">
                <i class="fas fa-arrow-left me-2"></i>Return
            </Button>
        </div>
    </CardBody>
</Card>

@code {
    private List<OrderDto> orders;
    private int totalCount;

    protected override async Task OnInitializedAsync()
    {
        var result = await OrderAppService.GetListAsync(new PagedAndSortedResultRequestDto());
        orders = result.Items.ToList();
        totalCount = Convert.ToInt32(result.TotalCount);
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Completed => "badge-success",
            OrderStatus.Pending => "badge-warning",
            OrderStatus.Cancelled => "badge-danger",
            _ => "badge-secondary"
        };
    }
}